openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: Changers Journey Rest API.
    url: https://virtserver.swaggerhub.com/querof/changersJourney/1.0.0
info:
  description: Api that containt main services of the task assigned in code challenge. Use token based Auth and secure call for all end-points.
  version: "1.0.0"
  title: Changers Journey REST API
  contact:
    email: querof@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: secure
    description: Auth-only calls
paths:
  /journey/mobility:
    get:
      tags:
        - https
      summary: Gets Journey Mobility
      security:
        - bearerAuth: []
      operationId: gets Journey
      description: |
        By passing the definned parameters, it's journey according with the parameters used; if the user if not defined the appi return the mobility of all users group by journeyType.
      parameters:
        - in: header
          name: userEmail
          description: User
          required: true
          schema:
                type: string
      responses:
        '200':
          description: search resuladmints matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/mobility'
        '400':
          description: bad input parameter
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /journey:
    post:
      tags:
        - https
      summary: adds Journey item
      security:
        - bearerAuth: []
      operationId: addJourney
      description: Adds an item to the system
      parameters:
        - in: header
          name: userEmail
          description: User
          required: true
          schema:
                type: string
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Journey'
        description: Journey item to add
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    User:
      type: object
      required:
        - id
        - user
        - password
      properties:
        id:
          type: integer
          format: uuid
          example: 851
        userEmail:
          type: string
          example: querof@gmail.com
        password:
          type: string
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
    Journey:
      type: object
      required:
        - id
        - distance
        - journeyType
        - startTime
        - endTime
        - appUser
      properties:
        id:
          type: integer
          format: uuid
          example: 9851
        journeyType:
          type: string
          example: walk
          enum: [walk, bike, drive, fly]
        startTime:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        endTime:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        appUser:
          $ref: '#/components/schemas/User'
    mobility:
      type: object
      required:
        - user
        - journeyType
        - distanceSum
      properties:
        appUser:
          $ref: '#/components/schemas/User'
        journeyType:
          $ref: '#/components/schemas/Journey'
        distanceSum:
          type: integer
          format: integer
          example: 1278
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: apiKey
      name: Authorization
      in: header
      description: |
        For accessing the API a valid JWT token must be passed in all the queries in
        the 'Authorization' header.


        A valid JWT token is generated by the API and retourned as answer of a call
        to the route /login giving a valid user & password.
